import "./chunk-3YG4HVQA.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  afterUpdate,
  createEventDispatcher,
  create_slot,
  dispatch_dev,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  onMount,
  safe_not_equal,
  tick,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-4HN6M6VN.js";
import "./chunk-ZJ46KODL.js";
import "./chunk-2B2CG5KL.js";

// node_modules/svelte-intersection-observer/src/IntersectionObserver.svelte
var get_default_slot_changes = (dirty) => ({
  intersecting: dirty & /*intersecting*/
  1,
  entry: dirty & /*entry*/
  2,
  observer: dirty & /*observer*/
  4
});
var get_default_slot_context = (ctx) => ({
  intersecting: (
    /*intersecting*/
    ctx[0]
  ),
  entry: (
    /*entry*/
    ctx[1]
  ),
  observer: (
    /*observer*/
    ctx[2]
  )
});
function create_fragment(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, intersecting, entry, observer*/
        263)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("IntersectionObserver", slots, ["default"]);
  let { element = null } = $$props;
  let { once = false } = $$props;
  let { intersecting = false } = $$props;
  let { root = null } = $$props;
  let { rootMargin = "0px" } = $$props;
  let { threshold = 0 } = $$props;
  let { entry = null } = $$props;
  let { observer = null } = $$props;
  const dispatch = createEventDispatcher();
  let prevRootMargin = null;
  let prevElement = null;
  const initialize = () => {
    $$invalidate(2, observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((_entry) => {
          $$invalidate(1, entry = _entry);
          $$invalidate(0, intersecting = _entry.isIntersecting);
        });
      },
      { root, rootMargin, threshold }
    ));
  };
  onMount(() => {
    initialize();
    return () => {
      if (observer) {
        observer.disconnect();
        $$invalidate(2, observer = null);
      }
    };
  });
  afterUpdate(async () => {
    if (entry !== null) {
      dispatch("observe", entry);
      if (entry.isIntersecting) {
        dispatch("intersect", entry);
        if (once)
          observer.unobserve(element);
      }
    }
    await tick();
    if (element !== null && element !== prevElement) {
      observer.observe(element);
      if (prevElement !== null)
        observer.unobserve(prevElement);
      prevElement = element;
    }
    if (prevRootMargin && rootMargin !== prevRootMargin) {
      observer.disconnect();
      prevElement = null;
      initialize();
    }
    prevRootMargin = rootMargin;
  });
  const writable_props = [
    "element",
    "once",
    "intersecting",
    "root",
    "rootMargin",
    "threshold",
    "entry",
    "observer"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<IntersectionObserver> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(3, element = $$props2.element);
    if ("once" in $$props2)
      $$invalidate(4, once = $$props2.once);
    if ("intersecting" in $$props2)
      $$invalidate(0, intersecting = $$props2.intersecting);
    if ("root" in $$props2)
      $$invalidate(5, root = $$props2.root);
    if ("rootMargin" in $$props2)
      $$invalidate(6, rootMargin = $$props2.rootMargin);
    if ("threshold" in $$props2)
      $$invalidate(7, threshold = $$props2.threshold);
    if ("entry" in $$props2)
      $$invalidate(1, entry = $$props2.entry);
    if ("observer" in $$props2)
      $$invalidate(2, observer = $$props2.observer);
    if ("$$scope" in $$props2)
      $$invalidate(8, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    element,
    once,
    intersecting,
    root,
    rootMargin,
    threshold,
    entry,
    observer,
    tick,
    createEventDispatcher,
    afterUpdate,
    onMount,
    dispatch,
    prevRootMargin,
    prevElement,
    initialize
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(3, element = $$props2.element);
    if ("once" in $$props2)
      $$invalidate(4, once = $$props2.once);
    if ("intersecting" in $$props2)
      $$invalidate(0, intersecting = $$props2.intersecting);
    if ("root" in $$props2)
      $$invalidate(5, root = $$props2.root);
    if ("rootMargin" in $$props2)
      $$invalidate(6, rootMargin = $$props2.rootMargin);
    if ("threshold" in $$props2)
      $$invalidate(7, threshold = $$props2.threshold);
    if ("entry" in $$props2)
      $$invalidate(1, entry = $$props2.entry);
    if ("observer" in $$props2)
      $$invalidate(2, observer = $$props2.observer);
    if ("prevRootMargin" in $$props2)
      prevRootMargin = $$props2.prevRootMargin;
    if ("prevElement" in $$props2)
      prevElement = $$props2.prevElement;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    intersecting,
    entry,
    observer,
    element,
    once,
    root,
    rootMargin,
    threshold,
    $$scope,
    slots
  ];
}
var IntersectionObserver_1 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      element: 3,
      once: 4,
      intersecting: 0,
      root: 5,
      rootMargin: 6,
      threshold: 7,
      entry: 1,
      observer: 2
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "IntersectionObserver_1",
      options,
      id: create_fragment.name
    });
  }
  get element() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get once() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set once(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get intersecting() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set intersecting(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get root() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set root(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rootMargin() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rootMargin(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get threshold() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set threshold(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get entry() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set entry(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get observer() {
    throw new Error("<IntersectionObserver>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set observer(value) {
    throw new Error("<IntersectionObserver>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var IntersectionObserver_default = IntersectionObserver_1;

// node_modules/svelte-intersection-observer/src/index.js
var src_default = IntersectionObserver_default;
export {
  src_default as default
};
//# sourceMappingURL=svelte-intersection-observer.js.map
